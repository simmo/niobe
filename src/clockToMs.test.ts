import { describe, expect, it } from 'vitest';

import { clockToMs } from './clockToMs.js';

const testCases = [
	['00:00:01', 1_000],
	['00:01:01', 61_000],
	['01:01:01', 3_661_000],
	['1', 1_000],
	['01', 1_000],
	['1:1', 61_000],
	['1:01', 61_000],
	['01:1', 61_000],
	['1:1:1', 3_661_000],
	['1:1:01', 3_661_000],
	['1:01:01', 3_661_000],
	['00:00:01.500000005', 1_500.000_005],
	['00:01:01.500000005', 61_500.000_005],
	['01:01:01.500000005', 3_661_500.000_005],
	['1.500000005', 1_500.000_005],
	['01.500000005', 1_500.000_005],
	['1:1.500000005', 61_500.000_005],
	['1:01.500000005', 61_500.000_005],
	['01:1.500000005', 61_500.000_005],
	['1:1:1.500000005', 3_661_500.000_005],
	['1:1:01.500000005', 3_661_500.000_005],
	['1:01:01.500000005', 3_661_500.000_005],
	['00:00:01.500_000_005', 1_500.000_005],
	['00:01:01.500_000_005', 61_500.000_005],
	['01:01:01.500_000_005', 3_661_500.000_005],
	['1.500_000_005', 1_500.000_005],
	['01.500_000_005', 1_500.000_005],
	['1:1.500_000_005', 61_500.000_005],
	['1:01.500_000_005', 61_500.000_005],
	['01:1.500_000_005', 61_500.000_005],
	['1:1:1.500_000_005', 3_661_500.000_005],
	['1:1:01.500_000_005', 3_661_500.000_005],
	['1:01:01.500_000_005', 3_661_500.000_005],
	['1:01:01.500_000_005', 3_661_500.000_005],
	['1:01:01.5_0_005', 3_661_500.000_005],
	['1:01:01.5_5_5', 3_661_500.500_500],
] as const;

describe('clockToMs()', () => {
	describe.each([
		['positive', false],
		['negative', true],
	])('%s time', (_, isNegative) => {
		const [offset, sign] = isNegative ? [-1, '-'] : [1, ''];

		it.each(testCases)(
			`returns ${sign}%s for ${sign}%s`,
			(clock, milliseconds) => {
				expect(clockToMs(`${sign}${clock}`)).toBe(milliseconds * offset);
			},
		);
	});
});
